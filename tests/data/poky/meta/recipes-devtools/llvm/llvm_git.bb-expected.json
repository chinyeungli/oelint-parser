{
  "DESCRIPTION": "The LLVM Compiler Infrastructure",
  "HOMEPAGE": "http://llvm.org",
  "LICENSE": "Apache-2.0-with-LLVM-exception",
  "SECTION": "devel",
  "LIC_FILES_CHKSUM": "file://LICENSE.TXT;md5=8a15a0759ef07f2682d2ba4b893c9afe",
  "DEPENDS": "libffi libxml2 zlib libedit ninja-native llvm-native",
  "COMPATIBLE_HOST": "null\nnull",
  "RDEPENDS_${PN}": " ncurses-terminfo",
  "inherit": "cmake pkgconfig",
  "PROVIDES": "llvm${PV}",
  "MAJOR_VERSION": "10",
  "MINOR_VERSION": "0",
  "PATCH_VERSION": "1",
  "PV": "${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}",
  "LLVM_RELEASE": "${PV}",
  "LLVM_DIR": "llvm${LLVM_RELEASE}",
  "BRANCH": "release/${MAJOR_VERSION}.x",
  "SRCREV": "ef32c611aa214dea855364efd7ba451ec5ec3f74",
  "SRC_URI": "git://github.com/llvm/llvm-project.git;branch=${BRANCH} \u001b           file://0006-llvm-TargetLibraryInfo-Undefine-libc-functions-if-th.patch;striplevel=2 \u001b           file://0007-llvm-allow-env-override-of-exe-path.patch;striplevel=2 \u001b          ",
  "UPSTREAM_CHECK_GITTAGREGEX": "llvmorg-(?P<pver>\u001bd+(\u001b.\u001bd+)+)",
  "S": "${WORKDIR}/git/llvm",
  "LLVM_INSTALL_DIR": "${WORKDIR}/llvm-install",
  "LLVM_TARGETS": "AMDGPU;!!!inlineblock!!!",
  "ARM_INSTRUCTION_SET": "arm\narm",
  "EXTRA_OECMAKE": "-DLLVM_ENABLE_ASSERTIONS=OFF \u001b                  -DLLVM_ENABLE_EXPENSIVE_CHECKS=OFF \u001b                  -DLLVM_ENABLE_PIC=ON \u001b                  -DLLVM_BINDINGS_LIST='' \u001b                  -DLLVM_LINK_LLVM_DYLIB=ON \u001b                  -DLLVM_ENABLE_FFI=ON \u001b                  -DLLVM_ENABLE_RTTI=ON \u001b                  -DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \u001b                  -DLLVM_OPTIMIZED_TABLEGEN=ON \u001b                  -DLLVM_TARGETS_TO_BUILD='${LLVM_TARGETS}' \u001b                  -DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON \u001b                  -DPYTHON_EXECUTABLE=${HOSTTOOLS_DIR}/python3 \u001b                  -G Ninja\n\u001b                  -DCMAKE_CROSSCOMPILING:BOOL=ON \u001b                  -DLLVM_TABLEGEN=${STAGING_BINDIR_NATIVE}/llvm-tblgen${PV} \u001b                  -DLLVM_CONFIG_PATH=${STAGING_BINDIR_NATIVE}/llvm-config${PV} \u001b                 \n\u001b                  -DCMAKE_CROSSCOMPILING:BOOL=ON \u001b                  -DLLVM_TABLEGEN=${STAGING_BINDIR_NATIVE}/llvm-tblgen${PV} \u001b                  -DLLVM_CONFIG_PATH=${STAGING_BINDIR_NATIVE}/llvm-config${PV} \u001b                 ",
  "PACKAGES": "${PN}-bugpointpasses ${PN}-llvmhello ${PN}-libllvm ${PN}-liboptremarks ${PN}-liblto",
  "RRECOMMENDS_${PN}-dev": "${PN}-bugpointpasses ${PN}-llvmhello ${PN}-liboptremarks",
  "FILES_${PN}-bugpointpasses": "\u001b    ${libdir}/${LLVM_DIR}/BugpointPasses.so \u001b",
  "FILES_${PN}-libllvm": "\u001b    ${libdir}/${LLVM_DIR}/libLLVM-${MAJOR_VERSION}.so \u001b    ${libdir}/libLLVM-${MAJOR_VERSION}.so \u001b",
  "FILES_${PN}-liblto": "\u001b    ${libdir}/${LLVM_DIR}/libLTO.so.* \u001b",
  "FILES_${PN}-liboptremarks": "\u001b    ${libdir}/${LLVM_DIR}/libRemarks.so.* \u001b",
  "FILES_${PN}-llvmhello": "\u001b    ${libdir}/${LLVM_DIR}/LLVMHello.so \u001b",
  "FILES_${PN}-dev": " \u001b    ${libdir}/${LLVM_DIR}/llvm-config \u001b    ${libdir}/${LLVM_DIR}/libRemarks.so \u001b    ${libdir}/${LLVM_DIR}/libLLVM-${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}.so \u001b",
  "FILES_${PN}-staticdev": "\u001b    ${libdir}/${LLVM_DIR}/*.a \u001b",
  "INSANE_SKIP_${PN}-libllvm": "dev-so",
  "BBCLASSEXTEND": "native nativesdk"
}